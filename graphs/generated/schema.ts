// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pack extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pack entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pack entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pack", id.toString(), this);
  }

  static load(id: string): Pack | null {
    return store.get("Pack", id) as Pack | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get puzzleGroupId(): BigInt {
    let value = this.get("puzzleGroupId");
    return value.toBigInt();
  }

  set puzzleGroupId(value: BigInt) {
    this.set("puzzleGroupId", Value.fromBigInt(value));
  }

  get requestId(): Bytes {
    let value = this.get("requestId");
    return value.toBytes();
  }

  set requestId(value: Bytes) {
    this.set("requestId", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tokenIds(): Array<BigInt> | null {
    let value = this.get("tokenIds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set tokenIds(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("tokenIds");
    } else {
      this.set("tokenIds", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get tier(): i32 {
    let value = this.get("tier");
    return value.toI32();
  }

  set tier(value: i32) {
    this.set("tier", Value.fromI32(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Puzzle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Puzzle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Puzzle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Puzzle", id.toString(), this);
  }

  static load(id: string): Puzzle | null {
    return store.get("Puzzle", id) as Puzzle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maxWinners(): BigInt {
    let value = this.get("maxWinners");
    return value.toBigInt();
  }

  set maxWinners(value: BigInt) {
    this.set("maxWinners", Value.fromBigInt(value));
  }

  get remainingWinners(): BigInt {
    let value = this.get("remainingWinners");
    return value.toBigInt();
  }

  set remainingWinners(value: BigInt) {
    this.set("remainingWinners", Value.fromBigInt(value));
  }

  get puzzleGroupId(): BigInt {
    let value = this.get("puzzleGroupId");
    return value.toBigInt();
  }

  set puzzleGroupId(value: BigInt) {
    this.set("puzzleGroupId", Value.fromBigInt(value));
  }

  get puzzleId(): BigInt {
    let value = this.get("puzzleId");
    return value.toBigInt();
  }

  set puzzleId(value: BigInt) {
    this.set("puzzleId", Value.fromBigInt(value));
  }

  get winners(): Array<Bytes> | null {
    let value = this.get("winners");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set winners(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("winners");
    } else {
      this.set("winners", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get prizes(): Array<string> | null {
    let value = this.get("prizes");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set prizes(value: Array<string> | null) {
    if (value === null) {
      this.unset("prizes");
    } else {
      this.set("prizes", Value.fromStringArray(value as Array<string>));
    }
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Piece extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Piece entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Piece entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Piece", id.toString(), this);
  }

  static load(id: string): Piece | null {
    return store.get("Piece", id) as Piece | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get piece(): string {
    let value = this.get("piece");
    return value.toString();
  }

  set piece(value: string) {
    this.set("piece", Value.fromString(value));
  }
}

export class Prize extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Prize entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Prize entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Prize", id.toString(), this);
  }

  static load(id: string): Prize | null {
    return store.get("Prize", id) as Prize | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    return value.toBytes();
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }

  get tokenId(): BigInt | null {
    let value = this.get("tokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get prize(): string {
    let value = this.get("prize");
    return value.toString();
  }

  set prize(value: string) {
    this.set("prize", Value.fromString(value));
  }
}

export class Listing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Listing entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Listing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Listing", id.toString(), this);
  }

  static load(id: string): Listing | null {
    return store.get("Listing", id) as Listing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get sellerTokenId(): BigInt {
    let value = this.get("sellerTokenId");
    return value.toBigInt();
  }

  set sellerTokenId(value: BigInt) {
    this.set("sellerTokenId", Value.fromBigInt(value));
  }

  get sellerPiece(): string {
    let value = this.get("sellerPiece");
    return value.toString();
  }

  set sellerPiece(value: string) {
    this.set("sellerPiece", Value.fromString(value));
  }

  get wantsPieces(): Array<string> | null {
    let value = this.get("wantsPieces");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set wantsPieces(value: Array<string> | null) {
    if (value === null) {
      this.unset("wantsPieces");
    } else {
      this.set("wantsPieces", Value.fromStringArray(value as Array<string>));
    }
  }

  get buyer(): Bytes | null {
    let value = this.get("buyer");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes | null) {
    if (value === null) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromBytes(value as Bytes));
    }
  }

  get buyerTokenId(): BigInt | null {
    let value = this.get("buyerTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyerTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("buyerTokenId");
    } else {
      this.set("buyerTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get buyerPiece(): string | null {
    let value = this.get("buyerPiece");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyerPiece(value: string | null) {
    if (value === null) {
      this.unset("buyerPiece");
    } else {
      this.set("buyerPiece", Value.fromString(value as string));
    }
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}
